generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  githubId      Int?      @unique
  githubUsername String?
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Organization {
  id               String              @id @default(cuid())
  name             String
  description      String              @default("")
  organizationType OrganizationType    @default(TEAM)
  url              String
  avatarUrl        String
  thirdPartyId     BigInt              @unique
  repositories     Repository[]
  members          OrganizationMember[]
  tokenUsage       TokenUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([thirdPartyId])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("member")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
}

model Repository {
  id             String          @id @default(cuid())
  name           String
  fullName       String
  description    String          @default("")
  url            String
  private        Boolean         @default(false)
  thirdPartyId   BigInt          @unique
  organizationId String
  isEnabled      Boolean         @default(true)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([thirdPartyId])
  @@index([organizationId])
}

model TokenUsage {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tokenCount     Int         @default(0)
  date           DateTime    @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, date])
  @@index([date])
}

enum OrganizationType {
  USER
  TEAM
}
